# AI智能内容巡检系统 - 技术方案说明

## 1. 系统架构概述

AI智能内容巡检系统采用前后端分离的Web应用架构，基于Flask微服务框架构建，实现了评论内容和封面图片的智能审核功能。系统通过调用外部AI服务API进行内容分析，并提供实时进度展示、结果统计和数据可视化功能。

### 1.1 技术栈

- **后端**：Python + Flask
- **前端**：HTML5 + CSS3 + JavaScript (原生)
- **数据可视化**：Chart.js
- **数据处理**：Pandas
- **异步处理**：Python threading
- **外部服务**：RESTful API调用

### 1.2 系统组件

系统由以下主要组件构成：

1. **Web服务器**：Flask应用服务器，处理HTTP请求和响应
2. **任务管理器**：管理审核任务的创建、执行、暂停和结束
3. **数据处理引擎**：处理Excel文件的读写和数据清洗
4. **AI接口适配器**：与外部AI服务API交互，发送审核请求并解析响应
5. **统计分析模块**：汇总审核结果，生成统计数据
6. **前端界面**：用户交互界面，包括文件上传、任务控制和结果展示

## 2. 数据流程

### 2.1 数据输入流程

1. 用户通过Web界面上传Excel文件（评论内容或封面链接）
2. 后端接收文件并保存到服务器临时存储
3. 用户输入API密钥并启动审核任务
4. 后端创建异步线程处理任务

### 2.2 数据处理流程

1. 读取Excel文件，进行数据清洗（去除空行、空值）
2. 逐行处理数据，对每条内容发起AI审核请求
3. 解析AI返回的审核结果和标签信息
4. 更新任务状态和进度
5. 实时保存处理结果到结果文件

### 2.3 数据输出流程

1. 生成包含审核结果的Excel文件
2. 统计审核结果和标签分布
3. 前端获取统计数据并渲染图表
4. 用户可下载完整的审核结果文件

## 3. 核心功能模块详解

### 3.1 任务管理模块

采用基于会话ID的任务状态管理机制，每个会话维护独立的任务状态，包括：

- 任务ID（UUID格式）
- 处理状态（idle/processing/done/error）
- 进度信息（总数、已处理数、百分比）
- 暂停标志
- 状态消息
- 统计数据
- 历史消息记录

通过全局字典存储任务状态，避免依赖Flask session，提高系统稳定性和可扩展性。

### 3.2 AI接口适配模块

实现了与外部AI服务的标准化接口，主要功能：

- 构建符合API要求的请求数据结构
- 发送HTTP请求并处理响应
- 解析AI返回的非结构化文本，提取审核结果和标签信息
- 实现请求重试机制，提高系统稳定性
- 应用速率限制，避免API调用过于频繁

### 3.3 标签统计模块

针对违规标签的统计采用整体字符串匹配方式，而非拆分计数：

```python
# 更新标签统计 - 按整体标签字符串统计，不再拆分
if tags and len(tags) > 0:
    # 将标签列表合并为一个字符串，作为一个整体标签
    tag_str = ', '.join(tags)
    if tag_str in task_status[audit_type][session_id]['statistics']['tags']:
        task_status[audit_type][session_id]['statistics']['tags'][tag_str] += 1
    else:
        task_status[audit_type][session_id]['statistics']['tags'][tag_str] = 1
```

这种方式确保了图表统计中"审核结果分布"中低质的总数与"低质标签分布"的总数完全对应，避免了标签拆分导致的统计不一致问题。

### 3.4 前端交互模块

采用原生JavaScript实现前端交互逻辑，主要功能：

- 文件上传与验证
- 任务状态轮询与实时更新
- 任务控制（开始、暂停、继续、完成、结束）
- 结果统计与图表渲染
- 历史记录管理

通过会话ID机制确保用户会话隔离，提高系统安全性和用户体验。

## 4. 数据可视化实现

### 4.1 图表渲染技术

使用Chart.js库实现数据可视化，主要图表类型：

- 饼图：展示审核结果分布（正常、违规、处理失败等）
- 柱状图：展示标签分布情况

图表渲染采用响应式设计，自适应容器大小，并通过以下配置优化显示效果：

```javascript
// 饼图配置
options: {
    responsive: true,
    maintainAspectRatio: false,  // 允许图表根据容器调整大小
    plugins: {
        legend: {
            position: 'bottom'  // 图例位置
        }
    }
}

// 柱状图配置
options: {
    responsive: true,
    maintainAspectRatio: false,
    scales: {
        y: {
            beginAtZero: true,  // Y轴从0开始
            ticks: {
                precision: 0  // 只显示整数刻度
            }
        }
    }
}
```

### 4.2 图表比例优化

为确保左右两边图形比例一致，采用以下策略：

1. 为图表容器设置固定高度（300px），确保两个图表高度一致
2. 禁用maintainAspectRatio选项，允许图表完全填充容器
3. 使用CSS Flexbox布局，确保两个图表容器宽度相等
4. 为移动设备适配垂直布局，确保在小屏幕上也能良好显示

## 5. 系统优化与特性

### 5.1 性能优化

- **增量保存**：每处理完一条数据即保存结果，避免任务中断导致数据丢失
- **异步处理**：使用线程池处理耗时任务，避免阻塞主线程
- **请求限流**：对API请求实施速率限制，避免触发API服务限制
- **错误重试**：实现请求失败自动重试机制，提高系统稳定性

### 5.2 用户体验优化

- **实时进度**：通过轮询机制实时更新任务进度和状态
- **状态反馈**：通过颜色编码和消息提示提供清晰的状态反馈
- **响应式设计**：适配不同屏幕尺寸，提供一致的用户体验
- **任务控制**：提供暂停/继续/完成/结束等灵活的任务控制选项
- **历史记录**：保存历史审核记录，方便用户查看和下载历史结果

### 5.3 特殊处理逻辑

- **标签为"/"的处理**：将低质标签为"/"的case判定为"正常"
```python
# 特殊处理：如果标签为"/"，则结果应为"正常"
if len(tags) == 0 or (len(tags) == 1 and tags[0] == '/'):
    result = '正常'
    tags = []
```

- **任务进行中的上传限制**：防止在任务进行中上传新文件
```javascript
// 检查是否有正在进行的任务
fetch(`/status/${type}?session_id=${sessionId}`)
.then(response => response.json())
.then(data => {
    if (data.status === 'processing' || data.status === 'done') {
        showStatusMessage(type, '请先结束当前任务', 'warning');
        fileInput.value = ''; // 清空文件选择
        return;
    }
    // 继续上传流程...
})
```

## 6. 系统安全与稳定性

### 6.1 安全措施

- **文件验证**：严格验证上传文件类型和内容
- **会话隔离**：使用UUID确保用户会话隔离
- **错误处理**：全面的异常捕获和处理机制
- **日志记录**：详细记录系统操作和错误信息

### 6.2 稳定性保障

- **状态持久化**：定期保存处理结果，防止数据丢失
- **任务恢复**：支持暂停后继续处理任务
- **错误恢复**：单条数据处理失败不影响整体任务执行
- **资源管理**：合理控制并发请求数量，避免资源耗尽

## 7. 部署与扩展

### 7.1 部署方案

系统支持多种部署方式：

- **开发环境**：Flask内置服务器（debug模式）
- **生产环境**：Gunicorn + Nginx
- **容器化**：Docker容器部署

### 7.2 扩展性设计

系统设计考虑了未来扩展需求：

- **模块化架构**：便于添加新的审核类型和功能
- **可配置API**：支持切换不同的AI服务提供商
- **数据存储抽象**：可轻松替换为数据库存储
- **前后端分离**：前端可独立升级和定制

## 8. 版本信息

- **当前版本**：v1.0.0
- **版权所有**：互联网测试中心
- **发布日期**：2025年
